package com.norsez.dsp.block.oscillator.multimode;

import com.norsez.dsp.block.DSPBlock;
import com.norsez.dsp.block.DSPSystem;
import com.norsez.dsp.block.Note;
import com.norsez.dsp.block.Table;
import com.norsez.dsp.block.oscillator.DigiWave;
import com.norsez.dsp.block.oscillator.Noise;
import com.norsez.dsp.block.oscillator.Wavetable;
import com.norsez.dsp.synth.Parameter;
import com.norsez.dsp.synth.ParameterDisplay;
import com.norsez.dsp.synth.ParameterManager;

/**
 * <p>Title: LFO (low frequency oscillator)</p>
 * <p>Description: Encapsulates a typical LFO unit. It uses Wavetable to genereate waveform and. It also
 * uses Noise to generate noise. The Sample and Hold is generated by the use of both
 * Wavetable and Noise. It can also listens to a gate which whenever it opens, it will
 * reset the phase. (Useful for key triggered LFO.) The rate can be set by note length
 * with respect to a tempo.  The tick (int) method is designed for ticking at
 * the control rate. A Random LFO can be obtained by passing the sample and hold output
 * thru a lowpass filter. </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: Norsez Orankijanan</p>
 *
 * @author Norsez Orankijanan
 * @version 1.0
 */

public class LFO
        extends DSPBlock implements com.norsez.dsp.block.modulation.ModSource {

    private Noise noise;

    private Shape curShape;
    private Wavetable wavetable;

    //current sample and hold value.
    private double sampleAndHoldValue;

    private double lastGate;

    public LFO() {
        noise = new Noise();

        wavetable = new Wavetable();

        setShape(Shape.SINE);

    }

    public double getFrequecyDisplay() {
        return wavetable.cps * DSPSystem.getSamplingRate();
    }

    public void addToParameterManager(ParameterManager pm, String groupName,
                                      String prefix) {

        pm.addParameter(new Parameter(prefix + "Shape", Shape.getAllShapes(),
                groupName));
        pm.addParameter(new Parameter(prefix + "Rate", 0.25, groupName,
                ParameterDisplay.LFO_RATE));
    }


    /**
     * @param g gate value. When gate change from 0 to >0, LFO's phase will be reset.
     */
    public void setPhaseByGate(double g) {

        if (lastGate == 0 && g > 0) {
            wavetable.phase = 0;
        }

        lastGate = g;
    }

    /**
     * Sets an arbitrary phase position of the wavetable.
     *
     * @param p phase position [0,1.0]
     */
    public void setPhase(double p) {
        wavetable.phase = p;
    }

    private boolean resetByGate;

    public void setResetByGate(double i) {
        if (i == 0) resetByGate = false; else resetByGate = true;
    }

    public void setGate(double g) {
        if (resetByGate) {
            if (lastGate == 0 && g > 0)
                wavetable.phase = 0;
        }

        lastGate = g;
    }


    public void setShape(LFO.Shape s) {

        if (s == Shape.SINE) {
            wavetable.setWavetable(Table.T_SINE);
        } else if (s == Shape.SQUARE) {
            wavetable.setWavetable(Table.T_SQUARE);
        } else if (s == Shape.TRIANGLE) {
            wavetable.setWavetable(Table.T_TRIANGLE);
        } else if (s == Shape.SAW) {
            wavetable.setWavetable(Table.T_SAW);
        } else if (s == Shape.SAMPLE_AND_HOLD) {
            sampleAndHoldValue = noise.tick();
        } else {
            for (int i = 6; i < Shape.ALL_SHAPES.length; i++) {
                if (Shape.ALL_SHAPES[i] == s) {
                    wavetable.setWavetable(DigiWave.DIGIWAVES[i - 6][DigiWave.DIGIWAVES[0].
                            length - 1]);
                    break;
                }
            }
        }
        curShape = s;

    }

    /**
     * set the LFO rate by Tempo. This cancels the effect of setRate ().
     */
    public void setRateByTempo(double bpm, Note note) {
        wavetable.cps = (1.0 / Note.getSecondsPerNote(bpm, note)) /
                DSPSystem.getSamplingRate();
    }

    /**
     * set the Lfo rate. This cancels the effect of setRateByTemp().
     */
    public void setRate(double rate) {
        wavetable.cps = rate;
    }

    public double getValue() {
        return lastValue;
    }


    /**
     * <b>Depreciated: use tick ( int steps)  instead.</b>
     */
    public double tick() {
        throw new java.lang.UnsupportedOperationException(this +
                "use tick(int) instead of tick()");
    }

    public double tick(int steps) {
        if (curShape == Shape.NOISE) {
            lastValue = noise.tick();

        } else if (curShape == Shape.SAMPLE_AND_HOLD) {

            if (wavetable.phase > 1) {
                wavetable.phase = 0;
                sampleAndHoldValue = noise.tick();
            }

            wavetable.phase += wavetable.cps * steps;

            lastValue = sampleAndHoldValue;

        } else {
            lastValue = wavetable.tick(steps);
        }

        return lastValue;
    }

    public static class Shape {
        private final String name;
        private static java.util.Vector shapes;

        private Shape(String name) {

            if (shapes == null) {
                shapes = new java.util.Vector();

            }
            this.name = name;
            shapes.add(this);
        }

        public static Shape[] getAllShapes() {
            Shape[] m = new Shape[shapes.size()];
            for (int i = 0, n = shapes.size(); i < n; i++) {
                m[i] = (Shape) shapes.elementAt(i);
            }
            return m;
        }

        public String toString() {
            return name;
        }

        private static Shape[] getShapesAndDigi() {
            Shape mm [] = new Shape[6 + DigiWave.DIGIWAVES.length];
            mm[0] = new Shape("Sine");
            mm[1] = new Shape("Saw");
            mm[2] = new Shape("Triangle");
            mm[3] = new Shape("Square");
            mm[4] = new Shape("Sample & Hold");
            mm[5] = new Shape("Noise");
            for (int i = 6; i < mm.length; i++) {
                mm[i] = new Shape("Digi " + (i - 1));
            }
            return mm;
        }

        public static final Shape[] ALL_SHAPES = getShapesAndDigi();

        public static final Shape SINE = ALL_SHAPES[0];
        public static final Shape SAW = ALL_SHAPES[1];
        public static final Shape TRIANGLE = ALL_SHAPES[2];
        public static final Shape SQUARE = ALL_SHAPES[3];;
        public static final Shape SAMPLE_AND_HOLD = ALL_SHAPES[4];;
        public static final Shape NOISE = ALL_SHAPES[5];;

    }
}
